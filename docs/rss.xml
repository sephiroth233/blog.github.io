<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>lang</title><link>https://sephiroth233.github.io/blog.github.io</link><description>随便写写~</description><copyright>lang</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://raw.githubusercontent.com/sephiroth233/blog.github.io/refs/heads/main/static/avatar.jpg</url><title>avatar</title><link>https://sephiroth233.github.io/blog.github.io</link></image><lastBuildDate>Tue, 11 Mar 2025 16:28:06 +0000</lastBuildDate><managingEditor>lang</managingEditor><ttl>60</ttl><webMaster>lang</webMaster><item><title>Windows脚本</title><link>https://sephiroth233.github.io/blog.github.io/post/Windows-jiao-ben.html</link><description>mihomo内核辅助脚本：
```
curl -O https://raw.githubusercontent.com/sephiroth233/bat-reo/main/blash.cmd
```
JDK环境变量配置脚本：
```
curl -O https://raw.githubusercontent.com/sephiroth233/bat-reo/main/jdk.cmd
```
navicat使用脚本：
```
curl -O https://raw.githubusercontent.com/sephiroth233/bat-reo/main/reset.cmd
```。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/Windows-jiao-ben.html</guid><pubDate>Wed, 19 Feb 2025 06:00:30 +0000</pubDate></item><item><title>sing-box脚本</title><link>https://sephiroth233.github.io/blog.github.io/post/sing-box-jiao-ben.html</link><description>## 终端预览

![Image](https://github.com/user-attachments/assets/0069ba70-33a7-49ab-a85f-8a894277b4bd)

## 一键脚本(无warp)
1.直接执行脚本：
```
bash &lt;(curl -fsSL sing-box-mu.vercel.app)
```
2.保存脚本到本地并执行：
```
curl -fsSL sing-box-mu.vercel.app -o sing-box.sh &amp;&amp; bash sing-box.sh
```

## 一键脚本(有warp)
1.直接执行脚本：
```
bash &lt;(curl -fsSL sing-box-mu.vercel.app/warp)
```
2.保存脚本到本地并执行：
```
curl -fsSL sing-box-mu.vercel.app/warp -o sing-box-warp.sh &amp;&amp; bash sing-box-warp.sh
```

## 项目简介
- 输出客户端配置 url 方便快速设置

- 自带 wireguard 出站解锁 openai netflix disney 

- 安装 sing-box 配置 hy2 vless ss2022+shadowtls

## 安装 sing-box
下载sing-box
```
bash &lt;(curl -fsSL https://sing-box.app/deb-install.sh)
```
修改/etc/sing-box/config.json
```
nano /etc/sing-box/config.json
```
查看config.json
```
cat /etc/sing-box/config.json
```
检查config.json
```
sing-box check -c /etc/sing-box/config.json
```
启动config.json
```
sing-box run -c /etc/sing-box/config.json
```
启动系统服务
```
systemctl enable sing-box
```
启动sing-box
```
systemctl start sing-box
```
停止sing-box
```
systemctl stop sing-box
```
重启sing-box
```
systemctl restart sing-box
```
查看sing-box
```
systemctl status sing-box
```
查看sing-box日志
```
cat /var/log/singbox.log
```
实时sing-box日志
```
tail -f /var/log/singbox.log
```
解码openai.srs
```
sing-box rule-set decompile geosite-openai.srs
```


## 卸载 sing-box
禁用sing-box
```
systemctl stop sing-box.service
systemctl disable sing-box.service
```
卸载sing-box
```
dpkg --purge sing-box
```
删除sing-box
```
rm -rf /etc/sing-box
rm -f /var/log/singbox.log
```
重载systemd
```
systemctl daemon-reload
```

## 原作者项目地址：https://github.com/passeway/sing-box
## fork仓库地址：https://github.com/sephiroth233/sing-box。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/sing-box-jiao-ben.html</guid><pubDate>Wed, 12 Feb 2025 03:57:15 +0000</pubDate></item><item><title>docker命令安装mysql</title><link>https://sephiroth233.github.io/blog.github.io/post/docker-ming-ling-an-zhuang-mysql.html</link><description>### 1. 准备目录结构&#13;
&#13;
首先，在你的主机上创建一个目录结构，以便挂载MySQL的数据、配置和日志文件。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/docker-ming-ling-an-zhuang-mysql.html</guid><pubDate>Mon, 09 Dec 2024 08:52:33 +0000</pubDate></item><item><title>Windows一键配置Java环境变量</title><link>https://sephiroth233.github.io/blog.github.io/post/Windows-yi-jian-pei-zhi-Java-huan-jing-bian-liang.html</link><description>脚本内容：&#13;
&#13;
```shell&#13;
@echo off&#13;
chcp 65001&#13;
setlocal enabledelayedexpansion&#13;
&#13;
REM 提示用户输入JDK路径&#13;
:input_jdk_path&#13;
set /p jdk_path=请输入JDK的安装路径（例如：C:\Program Files\Java\jdk1.8.0_221）：&#13;
&#13;
REM 检查路径是否存在&#13;
if not exist '%jdk_path%' (&#13;
    echo JDK路径无效或不存在，请检查路径后重试。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/Windows-yi-jian-pei-zhi-Java-huan-jing-bian-liang.html</guid><pubDate>Sun, 17 Nov 2024 09:35:26 +0000</pubDate></item><item><title>Navicat无限试用脚本</title><link>https://sephiroth233.github.io/blog.github.io/post/Navicat-wu-xian-shi-yong-jiao-ben.html</link><description>```shell&#13;
@echo off&#13;
echo Delete HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Update&#13;
reg delete HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Update /f&#13;
echo Delete HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Registration[version and language]&#13;
for /f %%i in (''REG QUERY 'HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium' /s | findstr /L Registration'') do (&#13;
    reg delete %%i /va /f&#13;
)&#13;
&#13;
echo Delete Info and ShellFolder under HKEY_CURRENT_USER\Software\Classes\CLSID&#13;
for /f 'tokens=*' %%a in ('reg query 'HKEY_CURRENT_USER\Software\Classes\CLSID'') do (&#13;
  for /f 'tokens=*' %%l in ('reg query '%%a' /f 'Info' /s /e ^| findstr /i 'Info'') do (&#13;
    echo Delete: %%a&#13;
    reg delete %%a /f&#13;
  )&#13;
  for /f 'tokens=*' %%l in ('reg query '%%a' /f 'ShellFolder' /s /e ^| findstr /i 'ShellFolder'') do (&#13;
    echo Delete: %%a&#13;
    reg delete %%a /f&#13;
  )&#13;
)&#13;
```&#13;
&#13;
新建一个txt文件，名字随意，以reset.txt为例：&#13;
&#13;
复制上面的脚本代码，将代码粘贴到reset.txt文件中。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/Navicat-wu-xian-shi-yong-jiao-ben.html</guid><pubDate>Fri, 19 Jul 2024 02:27:50 +0000</pubDate></item><item><title>一键dd纯净系统(leitbogioro)</title><link>https://sephiroth233.github.io/blog.github.io/post/yi-jian-dd-chun-jing-xi-tong-%28leitbogioro%29.html</link><description>&#13;
[github地址](https://github.com/leitbogioro/Tools 'https://github.com/leitbogioro/Tools')&#13;
&#13;
#### Centos7：&#13;
&#13;
```nginx&#13;
wget --no-check-certificate -qO InstallNET.sh 'https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh'  \&#13;
&amp;&amp; chmod a+x InstallNET.sh &amp;&amp; bash InstallNET.sh -centos 7 -pwd '密码'&#13;
```&#13;
&#13;
#### Debian12：&#13;
&#13;
```nginx&#13;
wget --no-check-certificate -qO InstallNET.sh 'https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh' \&#13;
&amp;&amp; chmod a+x InstallNET.sh &amp;&amp; bash InstallNET.sh -debian 12 -pwd '密码'&#13;
```&#13;
&#13;
#### Ubuntu 22.04：&#13;
&#13;
ps：ubuntu不支持自定义密码&#13;
&#13;
```nginx&#13;
wget --no-check-certificate -qO InstallNET.sh 'https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh' \&#13;
&amp;&amp; chmod a+x InstallNET.sh &amp;&amp; bash InstallNET.sh -ubuntu &#13;
```&#13;
&#13;
#### Windows11：&#13;
&#13;
```nginx&#13;
wget --no-check-certificate -qO InstallNET.sh 'https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh' \&#13;
&amp;&amp; chmod a+x InstallNET.sh &amp;&amp; bash InstallNET.sh -windows&#13;
&#13;
```&#13;
&#13;
#### 重点：&#13;
&#13;
默认用户名:&#13;
对于 Linux：`root`&#13;
对于 Windows：`Administrator`&#13;
&#13;
默认密码：&#13;
对于 Linux：`LeitboGi0ro`&#13;
对于 Windows：`Teddysun.com`&#13;
&#13;
修改密码：&#13;
&#13;
```nginx&#13;
echo root:password|sudo chpasswd root&#13;
```&#13;
&#13;
![image.png](https://s2.loli.net/2024/06/03/aBHbFomGSMsxT8Z.png)&#13;
。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/yi-jian-dd-chun-jing-xi-tong-%28leitbogioro%29.html</guid><pubDate>Fri, 19 Jul 2024 02:18:10 +0000</pubDate></item><item><title>微软输入法设置小鹤双拼</title><link>https://sephiroth233.github.io/blog.github.io/post/wei-ruan-shu-ru-fa-she-zhi-xiao-he-shuang-pin.html</link><description>打开PowerShell，输入：&#13;
```shell&#13;
reg add HKCU\Software\Microsoft\InputMethod\Settings\CHS /v UserDefinedDoublePinyinScheme0 /t REG_SZ /d '小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt' /f&#13;
```&#13;
然后回车。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/wei-ruan-shu-ru-fa-she-zhi-xiao-he-shuang-pin.html</guid><pubDate>Fri, 19 Jul 2024 02:17:24 +0000</pubDate></item><item><title>windows数字激活</title><link>https://sephiroth233.github.io/blog.github.io/post/windows-shu-zi-ji-huo.html</link><description>[Microsoft Activation Scripts](https://github.com/massgravel/Microsoft-Activation-Scripts 'Microsoft Activation Scripts')（简称MAS），具备HWID/KMS38/在线KMS激活Microsoft，这款批处理版KMS激活脚本最大特色是代码开源，小巧不误报。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/windows-shu-zi-ji-huo.html</guid><pubDate>Fri, 19 Jul 2024 02:16:30 +0000</pubDate></item><item><title>vps脚本</title><link>https://sephiroth233.github.io/blog.github.io/post/vps-jiao-ben.html</link><description>### 测速脚本

[项目地址](https://github.com/i-abc/Speedtest 'https://github.com/i-abc/Speedtest')

```shell
sudo bash &lt;(curl -sL bash.icu/speedtest)  
```

```shell
sudo bash &lt;(curl -sL https://raw.githubusercontent.com/i-abc/Speedtest/main/speedtest.sh)
```

### 流媒体解锁检测

```shell
sudo bash &lt;(curl -L -s check.unlock.media)
```

### 三网回城路由测试

[项目地址](https://github.com/zhanghanyun/backtrace 'https://github.com/zhanghanyun/backtrace')

```shell
sudo curl https://raw.githubusercontent.com/zhanghanyun/backtrace/main/install.sh -sSf | sh
```

### ip质量检测

```shell
sudo bash &lt;(curl -Ls IP.Check.Place)
```
。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/vps-jiao-ben.html</guid><pubDate>Fri, 19 Jul 2024 02:14:10 +0000</pubDate></item><item><title>Hyper-V端口占用问题</title><link>https://sephiroth233.github.io/blog.github.io/post/Hyper-V-duan-kou-zhan-yong-wen-ti.html</link><description>&#13;
今天发现Tomcat启动提示端口占用，但是又找不到占用的进程。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/Hyper-V-duan-kou-zhan-yong-wen-ti.html</guid><pubDate>Fri, 19 Jul 2024 02:13:26 +0000</pubDate></item><item><title>clash-meta懒人配置</title><link>https://sephiroth233.github.io/blog.github.io/post/clash-meta-lan-ren-pei-zhi.html</link><description>&#13;
将配置中的 **节点订阅** 替换为你自己的节点订阅链接即可&#13;
```yaml&#13;
mode: rule&#13;
ipv6: true&#13;
log-level: info&#13;
allow-lan: true&#13;
mixed-port: 7890&#13;
external-controller: 127.0.0.1:9090&#13;
&#13;
geodata-mode: true&#13;
geox-url:&#13;
  geoip: https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat&#13;
  geosite: https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat&#13;
  mmdb: https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb&#13;
&#13;
dns:&#13;
  enable: true&#13;
  ipv6: true&#13;
  listen: 0.0.0.0:53&#13;
  default-nameserver:&#13;
    - 223.5.5.5 &#13;
    - 119.29.29.29&#13;
  enhanced-mode: fake-ip&#13;
  fake-ip-range: 198.18.0.1/16&#13;
  fake-ip-filter:&#13;
    - '*.lan'&#13;
    - localhost.ptlogin2.qq.com&#13;
    - '+.srv.nintendo.net'&#13;
    - '+.stun.playstation.net'&#13;
    - '+.msftconnecttest.com'&#13;
    - '+.msftncsi.com'&#13;
    - '+.xboxlive.com'&#13;
    - 'msftconnecttest.com'&#13;
    - 'xbox.*.microsoft.com'&#13;
    - '*.battlenet.com.cn'&#13;
    - '*.battlenet.com'&#13;
    - '*.blzstatic.cn'&#13;
    - '*.battle.net'&#13;
  nameserver:&#13;
    - https://doh.pub/dns-query&#13;
    - https://dns.alidns.com/dns-query&#13;
&#13;
&#13;
&#13;
&#13;
######### 锚点 start #######&#13;
# proxy策略相关&#13;
pr: &amp;ap1 { type: select, proxies: [ 香港节点,台湾节点,日本节点,美国节点,韩国节点,新加坡节点,手动选择,自动选择,DIRECT ] }&#13;
#订阅更新相关&#13;
p: &amp;ap2 { type: http, interval: 3600, health-check: { enable: true, url: https://www.apple.com/library/test/success.html, interval: 300 } }&#13;
#延迟测试相关&#13;
auto: &amp;ap3 { type: url-test, lazy: true,  url: https://www.apple.com/library/test/success.html, interval: 900, use: [ Subscribe ] }&#13;
#节点选择&#13;
use: &amp;ap4 { type: select,   use: [ Subscribe ] }&#13;
d: &amp;ap5 { type: http,  format   behavior: domain,    interval: 86400 }&#13;
&#13;
&#13;
proxy-providers:&#13;
  Subscribe:&#13;
    url: '节点订阅'&#13;
    &lt;&lt;: *ap2&#13;
proxies: null&#13;
proxy-groups:&#13;
&#13;
  #策略组&#13;
  - { name: 手动选择, &lt;&lt;: *ap4 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Rocket.png}&#13;
  - { name: Global,   &lt;&lt;: *ap1 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Global.png}&#13;
  - { name: Github,  &lt;&lt;: *ap1 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/GitHub.png}&#13;
  - { name: Spotify, &lt;&lt;: *ap1 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Spotify.png}&#13;
  - { name: Openai,  &lt;&lt;: *ap1 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Bot.png}&#13;
  - { name: YouTube, &lt;&lt;: *ap1 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube.png}&#13;
  - { name: Emby, &lt;&lt;: *ap1 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Emby.png}&#13;
  - { name: Microsoft, &lt;&lt;: *ap1 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Microsoft.png}&#13;
  - { name: StreamCN, &lt;&lt;: *ap1 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Steam.png}&#13;
&#13;
&#13;
  #节点筛选&#13;
  - { name: 自动选择, &lt;&lt;: *ap3 ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png}&#13;
  - { name: 香港节点, &lt;&lt;: *ap3, filter: '(?i)🇭🇰|香港|(\b(HK|Hong)\b)' ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Hong_Kong.png}&#13;
  - { name: 台湾节点, &lt;&lt;: *ap3, filter: '(?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)\b)' ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Taiwan.png}&#13;
  - { name: 日本节点, &lt;&lt;: *ap3, filter: '(?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b)' ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Japan.png}&#13;
  - { name: 美国节点, &lt;&lt;: *ap3, filter: '(?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b)' ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_States.png}&#13;
  - { name: 韩国节点, &lt;&lt;: *ap3, filter: '(?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)\b)' ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Korea.png}&#13;
  - { name: 新加坡节点, &lt;&lt;: *ap3, filter: '(?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b)' ,icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Singapore.png}&#13;
&#13;
rule-providers:&#13;
  ad-rules: { type: http, format: text ,behavior: domain, interval: 86400, url: https://raw.githubusercontent.com/Cats-Team/AdRules/main/adrules_domainset.txt, path: ./ruleset/ad-rules.yaml }&#13;
  emby: { type: http, format: text ,behavior: classical, interval: 86400, url: https://raw.githubusercontent.com/Repcz/Tool/X/Clash/Rules/Emby.list, path: ./ruleset/emby.yaml }&#13;
  streamCN: { type: http, format: text ,behavior: classical, interval: 86400, url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SteamCN/SteamCN.yaml, path: ./ruleset/streamCN.yaml }&#13;
rules:&#13;
  - RULE-SET,ad-rules,REJECT&#13;
  - RULE-SET,streamCN,StreamCN&#13;
  - RULE-SET,emby,Emby&#13;
  - GEOSITE,github,Github&#13;
  - GEOSITE,openai,Openai&#13;
  - GEOSITE,spotify,Spotify&#13;
  - GEOSITE,youtube,YouTube&#13;
  - GEOSITE,microsoft,Microsoft&#13;
  - GEOSITE,private,DIRECT&#13;
  - GEOSITE,cn,DIRECT&#13;
  - GEOIP,CN,DIRECT&#13;
  - MATCH,Global&#13;
```&#13;
。</description><guid isPermaLink="true">https://sephiroth233.github.io/blog.github.io/post/clash-meta-lan-ren-pei-zhi.html</guid><pubDate>Fri, 19 Jul 2024 01:59:55 +0000</pubDate></item></channel></rss>